// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/jwt-provider.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockJwtProvider is a mock of JwtProvider interface.
type MockJwtProvider struct {
	ctrl     *gomock.Controller
	recorder *MockJwtProviderMockRecorder
}

// MockJwtProviderMockRecorder is the mock recorder for MockJwtProvider.
type MockJwtProviderMockRecorder struct {
	mock *MockJwtProvider
}

// NewMockJwtProvider creates a new mock instance.
func NewMockJwtProvider(ctrl *gomock.Controller) *MockJwtProvider {
	mock := &MockJwtProvider{ctrl: ctrl}
	mock.recorder = &MockJwtProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtProvider) EXPECT() *MockJwtProviderMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockJwtProvider) CreateToken(claims jwt.MapClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockJwtProviderMockRecorder) CreateToken(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockJwtProvider)(nil).CreateToken), claims)
}

// DecodeToken mocks base method.
func (m *MockJwtProvider) DecodeToken(token string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeToken", token)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeToken indicates an expected call of DecodeToken.
func (mr *MockJwtProviderMockRecorder) DecodeToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeToken", reflect.TypeOf((*MockJwtProvider)(nil).DecodeToken), token)
}
